T - Sweep
    -   Creare una funzione che sia in grado di leggere la temperatura della mixing chamber
        ogni secondo.
    -   vedi punto 2
    -   Deve poi calcolare la derivata istantanea e appendere il valore ad una lista
    -   Bisogna calcolare quindi le fluttuazioni della temperatura 
            (Che andamento ci aspettiamo? Discesa esponenziale --> stabilizzazione ad un valore?)
            Qual è il rumore legato alle fluttuazioni? Quanto vale in percentuale?2
    -   Se la derivata è ha un valore più grande delle fluttuazioni rispetto all'andamento previsto per quello specifico valore 
        di tempo per un periodo maggiore a N secondi allora 
            Mandare mail per avvertire che la temperatura è instabile

T - Sweep plot
    -   Plottare in tempo reale l'andamento della temperatura 
    -   Plottare in tempo reale l'andamento della derivata istantanea della temperatura rispetto al tempo



    Ciao Riccardo, il tipo di refrigeratore è quello corretto, anche se come potrai immaginare questa è una pubblicazione probabilmente 
    un po' vetusta e alcune cose sono cambiate in termini di prestazioni da allora (il concetto alla base invece no).
    Per fare quello che hai in mente si può fare qualcosa di molto meno sofisticato e che non discenda necessariamente da principi primi,
    che nella realtà hanno un elevato tasso di discostamento.
    La derivata su T è utile da valutare specialmente quando voi cambiate temperatura durante lo scan per misurare il gap:
    se la derivata è diversa da zero allora non siete ancora all'equilibrio. Ma forse questo lo avevate già implementato.
    Per quanto riguarda invece l'invio di messaggi di allerta, si possono seguire due approcci, non necessariamente esclusivi: 
    1) controllare la P della 1k pot (mi pare sia G4, ma potrei sbagliarmi): quando questa crolla al di sotto di un certo valore, 
    significa che non sta pescando più, e allora non raffredda la miscela in ingresso al refrigeratore; 
    2) verificare la T della MC, come proponi te. In questo caso non ti saprei dare però una regola generale, 
    i valori di soglia vanno valutati sperimentalmente. A occhio direi che se la T cresce a un rate superiore a...boh? 10 mK al minuto? allora c'è un problema. 
    Ovviamente però deve essere una crescita sostenuta nel tempo, quindi non basta mettere un controllo sulla derivata sul singolo secondo,
    altrimenti vi dà allarme anche quando spostate intenzionalmente voi la T; piuttosto deve rimanere sopra-soglia per n secondi
    (2 minuti? Tanto il tempo di reazione in caso di problemi non può essere tanto più breve di così) consecutivi per dare l'allarme.

    Tra l'altro ti preavviso anche su questa possibilità, che spero non avvenga, ma... ancora gli ordini universitari non sono riaperti,
    c'è perciò la possibilità non trascurabile che saremo costretti a slittare il raffreddamento. Avvisa anche i tuoi compagni di gruppo per favore.

    Marco


    import matplotlib.pyplot as plt
import matplotlib.animation as animation
import tmp102

# Parameters
x_len = 200         # Number of points to display
y_range = [10, 40]  # Range of possible Y values to display

# Create figure for plotting
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
xs = list(range(0, 200))
ys = [0] * x_len
ax.set_ylim(y_range)

# Initialize communication with TMP102
tmp102.init()

# Create a blank line. We will update the line in animate
line, = ax.plot(xs, ys)

# Add labels
plt.title('TMP102 Temperature over Time')
plt.xlabel('Samples')
plt.ylabel('Temperature (deg C)')

# This function is called periodically from FuncAnimation
def animate(i, ys):

    # Read temperature (Celsius) from TMP102
    temp_c = round(tmp102.read_temp(), 2)

    # Add y to list
    ys.append(temp_c)

    # Limit y list to set number of items
    ys = ys[-x_len:]

    # Update line with new Y values
    line.set_ydata(ys)

    return line,

# Set up plot to call animate() function periodically
ani = animation.FuncAnimation(fig,
    animate,
    fargs=(ys,),
    interval=50,
    blit=True)
plt.show()